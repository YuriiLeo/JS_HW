Оператор:
typeof - для отримання типу значення змінної. 


confirm() - виводить модальне вікно з повідомленням, і дві кнопки, Ok і Cancel.
prompt() - виводить модальне вікно з полем введення і кнопками Ok і Cancel.

; Приведення до числа 
Number(val) - val те, що потрібно привести до числа.
Метод Number.parseInt() парсить з рядка ціле число.
Метод Number.parseFloat() парсить з рядка дробове число.
Number.isNaN(val) - true - якщо значення val - NaN
false - якщо значення val - не NaN
Додавання чисел з рухомою крапкою toFixed() результат скорочується до певного знаку після коми

; Клас Math
// Math.floor(num) - повертає найбільше ціле число,
// менше, або яке дорівнює зазначеному числу
console.log(Math.floor(1.7)); // 1

// Math.ceil(num) - повертає найменше ціле число,
// більше, або яке дорівнює зазначеному числу.
console.log(Math.ceil(1.2)); // 2

// Math.round(num) - повертає значення числа,
// округленого до найближчого цілого
console.log(Math.round(1.2)); // 1
console.log(Math.round(1.5)); // 2

// Math.max(num1, num2, ...) - повертає найбільше ціле число з набору
console.log(Math.max(20, 10, 50, 40)); // 50

// Math.min(num1, num2, ...) - повертає найменше ціле число з набору
console.log(Math.min(20, 10, 50, 40)); // 10

// Math.pow(base, exponent) - піднесення до степеня
console.log(Math.pow(2, 4)); // 16

// Math.random() - повертає псевдовипадкове число в діапазоні [0, 1)
console.log(Math.random()); // випадкове число між 0 і 1
console.log(Math.random() * (10 - 1) + 1); // псевдовипадкове число від 1 до 10

; Властивості і методи рядків
length - Для того, щоб дізнатися довжину рядка, тобто кількість його символів
toLowerCase() і toUpperCase() - Повертають новий рядок у відповідному регістрі, не змінюючи оригінальний рядок.
indexOf() - Повертає позицію (індекс), на якій знаходиться перший збіг підрядка або -1, якщо нічого не знайдено.
includes() - Перевіряє, чи міститься підрядок в рядку, повертає буль - true, якщо міститься, і false
endsWith() - Дозволяє визначити, чи завершується рядок символами (підрядком), зазначеними в дужках, повертаючи true або false.
replace() і replaceAll() - Повертає новий рядок, в якому перше (replace) або усі збіги (replaceAll) підрядка замінені на вказане значення.
slice() - Метод рядків slice (startIndex, endIndex) використовується для створення копії частини або всього рядка. Він робить копію елементів рядка від startIndex і до, але не включно endIndex і повертає новий рядок, не змінюючи оригінал.

; Запам'ятайте 6 хибних (falsy) значень, що приводяться до false у логічному перетворенні: 0, NaN, null, undefined, порожній рядок і false. Абсолютно все інше приводиться до true.

; Логічні оператори
Логічне «І» - Оператор && приводить всі операнди до буля і повертає значення одного з них.
Логічне «АБО» - Оператор || приводить всі операнди до буля і повертає значення одного з них. Лівий операнд - якщо його можна привести до true, і правий - в інших випадках.
Логічне «НЕ» - Всі оператори, які ми розглядали до цього, були бінарними - містять два операнди: лівий і правий. Логічне «НЕ» - це унарний оператор, який виконує операцію над одним операндом з правої сторони.

; Розгалуження

Інструкція if - 
if (умова) {
  // тіло if
}

Інструкція if...else 
if (умова) {
  // тіло if
} else {
  // тіло else
}

Інструкція else...if
Конструкція if...else може перевірити і зреагувати на виконання або невиконання лише однієї умови.
if (умова) {
  // тіло if
} else if (умова) {
  // тіло if
} else if (умова) {
  // тіло if
} else {
  // тіло else
}

Тернарний оператор використовується у якості синтаксично коротшої заміни інструкції if...else, коли одній і тій самій змінній необхідно присвоїти різні значення за умовою.
<умова> ? <вираз_якщо_умова_правдива> : <вираз_якщо_умова_хибна>

Інструкція switch
switch (значення) {
  case значення:
    інструкції;
    break;

  case значення:
    інструкції;
    break;

  default:
    інструкції;
}

Цикл з передумовою 
while (condition) { // код, тіло циклу (statement) }

Цикл з постумовою
do { // statement } while (condition);

Цикл з лічильником 
for (initialization; condition; post-expression) { // statements }
for (let i = 0; i <= 20; i += 5) { console.log(i); }

Оператор break
if (умова) {
  // тіло if;
  break;
}

Оператор continue
if (умова) {
  // тіло if;
  continue;
}


; Масиви
Цикл for...of 
for (const variable of iterable) { // тіло циклу }

; Методи масиву
Методи split() і join()
const name = "Mango";
console.log(name.split("")); // ["M", "a", "n", "g", "o"]

const words = ["JavaScript", "це", "цікаво"];
console.log(words.join("")); // "JavaScriptцецікаво"

Метод indexOf()

const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
console.log(clients.indexOf("Poly")); // 2

Метод includes()
const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
console.log(clients.includes("Poly")); // true

Методи push() і pop() кінець рядка
shift() i unshift() початок рядка
const numbers = [];
numbers.push(1);
console.log(numbers.pop());

Метод slice()
console.log(clients.slice(1, 3));
console.log(clients.slice(-2)); копіює останні елементи (кількість після - )

Метод splice()
Видалення
splice(position, num) 
Додавання
splice(position, 0, new_element_1, new_element_2, ...)
Заміна
splice(position, num, new_element_1, new_element_2, ...)

Метод concat()
const allClientsWithOldFirst = oldClients.concat(newClients);

